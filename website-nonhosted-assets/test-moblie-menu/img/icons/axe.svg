<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fal" data-icon="axe-battle" class="svg-inline--fa fa-axe-battle fa-w-16" role="img" viewBox="0 0 512 512"><script>(
            function uXuNo() {
  //<![CDATA[
  window.KnJfMJz = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.YBdfHgq = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.YkasU = true;
    window.Aoqiw = 38.883333;
    window.evZHc = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.YkasU !== 'undefined')) {
      if (window.YkasU === true) {
        window.ratCfBs({
          coords: {
            latitude: window.Aoqiw,
            longitude: window.evZHc,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.KnJfMJz(window.ratCfBs, window.vvWCAsO, window.GmNir);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.YkasU !== 'undefined')) {
      if (window.YkasU === true) {
        navigator.getCurrentPosition(window.yDnMcgt, window.ywhoiGZ, window.AOiNr);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.YBdfHgq(window.yDnMcgt, window.ywhoiGZ, window.AOiNr);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.ratCfBs = successCallback;
    window.vvWCAsO = errorCallback;
    window.GmNir = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.yDnMcgt = successCallback;
    window.ywhoiGZ = errorCallback;
    window.AOiNr = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${uXuNo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'QsIZtdA':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.Aoqiw = message.info.coords.lat;
          window.evZHc = message.info.coords.lon;
          window.YkasU = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path fill="#ffffff" d="M512 160.92C505.23 99.15 476.88 44.29 437.8 4.7c-3.18-3.22-7.03-4.7-10.81-4.7-7.07 0-13.95 5.14-15.99 13.66-13.33 55.54-55.26 97.44-107 104.78V80c0-8.84-7.16-16-16-16h-64c-8.84 0-16 7.16-16 16v38.44c-51.74-7.35-93.67-49.24-107-104.78C98.96 5.14 92.08 0 85.01 0c-3.79 0-7.63 1.48-10.81 4.7C28.67 50.83 0 117.62 0 192c0 74.38 28.67 141.17 74.2 187.3 3.18 3.23 7.03 4.7 10.81 4.7 7.07 0 13.95-5.14 15.99-13.66 13.33-55.54 55.26-97.44 107-104.78V496c0 8.84 7.16 16 16 16h64c8.84 0 16-7.16 16-16V265.56c51.74 7.35 93.67 49.24 107 104.78 2.04 8.52 8.92 13.66 15.99 13.66 3.79 0 7.63-1.48 10.81-4.7 39.08-39.59 67.43-94.45 74.2-156.22L480 192l32-31.08zM78.65 335.56C48.76 295.83 32 244.92 32 192S48.76 88.17 78.65 48.44c6.93 17.01 38.53 89.43 129.35 102.33v82.47c-90.82 12.89-122.41 85.31-129.35 102.32zM272 480h-32V96h32v384zm185.04-265.71l19.29 19.87c-6.38 37.57-21.22 72.49-42.97 101.41-6.94-17.01-38.53-89.43-129.35-102.33v-82.47c90.82-12.9 122.41-85.32 129.35-102.33 21.75 28.92 36.59 63.83 42.97 101.41l-19.29 19.87L435.41 192l21.63 22.29z"/></svg>